# UTF-8 declaration
snippet utf
	# -*- coding: utf-8 -*-${1}
## Common function calls/patterns ##
# Type checking
snippet isi
	isinstance(${1:var}, ${2:basestring})${3}
# Type checking
snippet fut
	from __future__ import absolute_import, division, print_function, unicode_literals  # isort:skip # noqa
# Join
snippet join
	"${1}".join(${2})
# Main block
snippet main
	def main() -> None:
		pass${1}


	if __name__ == "__main__":  # pragma: no cover
		main()  # pragma: no cover
## Functions and classes ##
# doc string
snippet doc
	"""
	x${1}
	"""${2}
# Function
snippet def
	def ${1:name}(${2}):
		${3}
# Method
snippet meth
	def ${1:name}(self${2}):
		${3}
# Class
snippet class
	class ${1:name} (${2:object}):
		${3}
# abc metaclass declartion
snippet meta
	__metaclass__ = ABCMeta
snippet cons
	def __init__(self${1}):
		${2}
# New exception type
snippet err
	class ${1:ExceptionName} (Exception):
		pass
	${2}
snippet decorator
	def ${1:name}(func):
		from functools import wraps

		@wraps
		def inner(*args, **kwargs):
			result = func(*args, **kwargs)
			${2}

			return result

		return inner
snippet RunPython
	def ${1:forwards}(apps, schema_editor):
		pass


	def ${2:backwards}(apps, schema_editor):
		pass

			${0}migrations.RunPython(
				$1,
				$2,
				elidable=True,
			),
snippet cursor
	with connection.cursor() as cursor:
		${0}
snippet get_model
	get_model('`expand('%:p:h:h:t')`', '`matchlist(getline('.'), '\(\w\+\) =')[1]`')${0}
snippet super
	`python_tools#cursor_info#GenerateSuperCall()`(${0})
snippet utest
	from unittest import TestCase

	class ${1:SomeTestCase}(TestCase):

		def setUp(self):
			super().setUp()

		def tearDown(self):
			super().tearDown()
snippet .save(u
	.save(update_fields=[${0}])
snippet typec
	if TYPE_CHECKING:
		${0}
